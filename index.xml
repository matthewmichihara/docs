<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud Native Buildpack Documentation</title>
    <link>/</link>
    <description>Recent content on Cloud Native Buildpack Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building app images using `build`</title>
      <link>/docs/using-pack/building-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/building-app/</guid>
      <description>pack build enables app developers to create runnable app images from source code using buildpacks.
$ pack build &amp;lt;image-name&amp;gt; Example: Building using the default builder image In the following example, an app image is created from Node.js application source code.
$ cd path/to/node/app $ pack build my-app:my-tag In this case, the default builder (essentially, an image containing buildpacks) is used, and an appropriate buildpack is automatically selected from the builder based on the app source code.</description>
    </item>
    
    <item>
      <title>Updating app images using `rebase`</title>
      <link>/docs/using-pack/update-app-rebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/update-app-rebase/</guid>
      <description>The pack rebase command allows app developers to rapidly update an app image when its stack&amp;rsquo;s run image has changed. By using image layer rebasing, this command avoids the need to fully rebuild the app.
$ pack rebase &amp;lt;image-name&amp;gt; Example: Rebasing an app image Consider an app image my-app:my-tag that was originally built using the default builder. That builder&amp;rsquo;s stack has a run image called pack/run. Running the following will update the base of my-app:my-tag with the latest version of pack/run.</description>
    </item>
    
    <item>
      <title>Working with builders using `create-builder`</title>
      <link>/docs/using-pack/working-with-builders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/working-with-builders/</guid>
      <description>pack create-builder enables buildpack authors and platform operators to bundle a collection of buildpacks into a single image for distribution and use with a specified stack.
$ pack create-builder &amp;lt;image-name&amp;gt; --builder-config &amp;lt;path-to-builder-toml&amp;gt; Example: Creating a builder from buildpacks In this example, a builder image is created from buildpacks org.example.buildpack-1 and org.example.buildpack-2. A TOML configuration file provides necessary configuration to the command.
[[buildpacks]] id = &amp;#34;org.example.buildpack-1&amp;#34; uri = &amp;#34;relative/path/to/buildpack-1&amp;#34; [[buildpacks]] id = &amp;#34;org.</description>
    </item>
    
    <item>
      <title>Working with stacks</title>
      <link>/docs/using-pack/stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/stacks/</guid>
      <description>What is a stack? A stack provides the buildpack lifecycle with build-time and run-time environments in the form of images. If you&amp;rsquo;re using the pack CLI, running pack suggest-stacks will display a list of recommended stacks that can be used when running pack create-builder, along with each stack&amp;rsquo;s associated build and run images.
Using stacks Stacks are used by builders and are configured through a builder&amp;rsquo;s configuration file:
[[buildpacks]] # .</description>
    </item>
    
    <item>
      <title>Setup your local environment</title>
      <link>/docs/create-buildpack/setup-local-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/setup-local-environment/</guid>
      <description>First we will want to create a sample ruby app that you can use when developing the ruby cloud native buildpack
mkdir -p ~/workspace/ruby-sample-app cd ~/workspace/ruby-sample-app  Create a file called app.rb with the following content:
require &#39;sinatra&#39; set :bind, &#39;0.0.0.0&#39; set :port, 8080 get &#39;/&#39; do &#39;Hello World!&#39; end  Create a Gemfile with the following content:
source &amp;quot;https://rubygems.org&amp;quot; git_source(:github) {|repo_name| &amp;quot;https://github.com/#{repo_name}&amp;quot; } gem &amp;quot;sinatra&amp;quot;  Next we want to create the directory where you will create your buildpack</description>
    </item>
    
    <item>
      <title>Building blocks of a Cloud Native Buildpack</title>
      <link>/docs/create-buildpack/building-blocks-cnb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/building-blocks-cnb/</guid>
      <description>Now we will setup the buildpack scaffolding. You will need to make these files in your ruby-cnb directory
cd ruby-cnb  buildpack.toml Once you are in the directory. You will need to create a buildpack.toml file in that directory. This file must exist in the root directory of your buildpack so the pack cli knows it is a buildpack and it can apply the build lifecycle to it.
Create the buildpack.</description>
    </item>
    
    <item>
      <title>Detecting your application</title>
      <link>/docs/create-buildpack/detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/detection/</guid>
      <description>Next you will want to actually detect that the app your are building is a ruby app. In order to do this you will need to check for a Gemfile.
Replace exit 1 in the bin/detect file with the following check
if [[ ! -f Gemfile ]]; then exit 100 fi  And now your bin/detect script will look like this
#!/usr/bin/env bash set -eo pipefail if [[ ! -f Gemfile ]]; then exit 100 fi  Next, rebuild your app with your updated buildpack</description>
    </item>
    
    <item>
      <title>Building your application</title>
      <link>/docs/create-buildpack/build-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/build-app/</guid>
      <description>Next we will make the build step work. This will require a few updates to the bin/build file.
We need to read the layers directory passed in by build lifecycle - learn more about the lifecycle here
layersdir=$1  We need to create a ruby layer in the image. We&amp;rsquo;ll add launch = true to direct the lifecycle to provide ruby when we launch our app.
mkdir -p $layersdir/ruby echo -e &#39;launch = true&#39; &amp;gt; $layersdir/ruby.</description>
    </item>
    
    <item>
      <title>Make your application runnable</title>
      <link>/docs/create-buildpack/make-app-runnable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/make-app-runnable/</guid>
      <description>Next we want to set a default start command for the application in the image. You will want to add the following code to then end of your bin/build script.
# Set default start command echo &#39;processes = [{ type = &amp;quot;web&amp;quot;, command = &amp;quot;bundle exec ruby app.rb&amp;quot;}]&#39; &amp;gt; &amp;quot;$layersdir/launch.toml&amp;quot;  This sets your default start command.
Your full bin/build script should now look like this
#!/usr/bin/env bash set -eo pipefail # Set the layersdir variable to be the first argument from the build lifecycle layersdir=$1 echo &amp;quot;---&amp;gt; Ruby Buildpack&amp;quot; echo &amp;quot;---&amp;gt; Downloading and extracting ruby&amp;quot; mkdir -p $layersdir/ruby echo -e &#39;launch = true&#39; &amp;gt; $layersdir/ruby.</description>
    </item>
    
    <item>
      <title>Improving performance with caching</title>
      <link>/docs/create-buildpack/caching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/create-buildpack/caching/</guid>
      <description>Next we want to separate the ruby interpreter and bundled gems into different layers. This will allows us to cache the ruby layer and gem dependency layer separately, which helps speed up builds.
Creating the Bundler Layer To do this replace the line in the bin/build script
echo &amp;quot;---&amp;gt; Installing gems&amp;quot; bundle install  With the following
echo &amp;quot;---&amp;gt; Installing gems&amp;quot; mkdir &amp;quot;$layersdir/bundler&amp;quot; echo -e &#39;launch = true&#39; &amp;gt; &amp;quot;$layersdir/bundler.</description>
    </item>
    
  </channel>
</rss>